---
import { type DataEntryMap, getCollection } from "astro:content";

import FigureImage from "@components/FigureImage.astro";

interface Props {
  collectionName: keyof DataEntryMap;
}

const { collectionName } = Astro.props;

const posts = await getCollection(collectionName);

const sortedPosts = posts.sort(
  (a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);
---

<ul>
  {
    sortedPosts.map((post) => (
      <li>
        <FigureImage
          src={post.data.thumb}
          alt={post.data.description}
          href={`./${post.id}/`}
        >
          <time datetime={new Date(post.data.date).toISOString()}>
            {new Date(post.data.date).toLocaleDateString("en-US", {
              year: "numeric",
              month: "long",
              day: "numeric",
            })}
          </time>
          <h2>{post.data.title}</h2>
          <p>{post.data.description}</p>
          <p class="tags">{post.data.tags.join(", ")}</p>
        </FigureImage>
      </li>
    ))
  }
</ul>

<style>
  ul {
    padding-inline: clamp(5rem, 5vw, 10rem);
    list-style: none;

    li {
      margin-block: clamp(5rem, 8vw, 10rem);

      figure {
        a {
          display: grid;
          grid-auto-flow: dense;
          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
          place-items: center center;

          text-decoration: none;
          text-underline-offset: 5px;

          transition: text-underline-offset 0.5s
            linear(
              0 0%,
              0.22 2.1%,
              0.86 6.5%,
              1.11 8.6%,
              1.3 10.7%,
              1.35 11.8%,
              1.37 12.9%,
              1.37 13.7%,
              1.36 14.5%,
              1.32 16.2%,
              1.03 21.8%,
              0.94 24%,
              0.89 25.9%,
              0.88 26.85%,
              0.87 27.8%,
              0.87 29.25%,
              0.88 30.7%,
              0.91 32.4%,
              0.98 36.4%,
              1.01 38.3%,
              1.04 40.5%,
              1.05 42.7%,
              1.05 44.1%,
              1.04 45.7%,
              1 53.3%,
              0.99 55.4%,
              0.98 57.5%,
              0.99 60.7%,
              1 68.1%,
              1.01 72.2%,
              1 86.7%,
              1 100%
            );

          img {
            max-width: min(350px, 100%);
            border-radius: 0.5rem;
            transition: scale 0.5s
              linear(
                0 0%,
                0 1.8%,
                0.01 3.6%,
                0.03 6.35%,
                0.07 9.1%,
                0.13 11.4%,
                0.19 13.4%,
                0.27 15%,
                0.34 16.1%,
                0.54 18.35%,
                0.66 20.6%,
                0.72 22.4%,
                0.77 24.6%,
                0.81 27.3%,
                0.85 30.4%,
                0.88 35.1%,
                0.92 40.6%,
                0.94 47.2%,
                0.96 55%,
                0.98 64%,
                0.99 74.4%,
                1 86.4%,
                1 100%
              );
          }

          figcaption {
            width: clamp(20ch, 30ch, 45ch);

            h2 {
              text-decoration: underline solid var(--text-950) 1px;
            }

            p {
              color: var(--text-700);
            }

            .tags {
              font-size: var(--fs-300);
              font-weight: 700;
              color: var(--text-800);
              word-spacing: 2ch;
            }
          }

          &:hover {
            text-underline-offset: 1px;

            img {
              scale: 1.05;
            }
          }

          @media (width <= 768px) {
            figcaption {
              margin-block: 2rem;
            }
          }
        }
      }
    }
  }
</style>
