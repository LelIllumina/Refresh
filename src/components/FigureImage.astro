---
import type { ImageOutputFormat } from "astro";
import { getImage } from "astro:assets";
import type { HTMLAttributes } from "astro/types";

import { readFileSync } from "node:fs";
import { join } from "node:path";
import { imageSize } from "image-size";

import Anchor from "./Anchor.astro";

interface Props extends Omit<HTMLAttributes<"img">, "src"> {
  src: ImageMetadata | string;
  format?: ImageOutputFormat;
  href?: string;
  caption?: string | boolean;
  position?: string;
  fit?: "contain" | "cover" | "fill" | "none" | "scale-down";
}

const {
  src,
  width,
  height,
  format = "webp",
  alt = "",
  href,
  caption = true,
  ...rest
} = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/**/*.{png,jpg,jpeg,webp,avif,svg,gif}",
);

let imageImport: ImageMetadata | string;
let remoteDimensions: { width: number; height: number } | undefined;

if (typeof src === "string" && src in images) {
  const imageModule = await images[src]();
  imageImport = imageModule.default;
} else {
  imageImport = src;
}

const options = {
  src: imageImport,
  format,
  ...(width
    ? { width: Number(width) }
    : remoteDimensions?.width
      ? { width: remoteDimensions.width }
      : {}),
  ...(height
    ? { height: Number(height) }
    : remoteDimensions?.height
      ? { height: remoteDimensions.height }
      : {}),
  inferSize: true,
  ...rest,
};

const optimizedImage = await getImage(options);
---

<figure>
  {
    href ? (
      <Anchor {href}>
        <img
          src={optimizedImage.src}
          width={optimizedImage.attributes.width}
          height={optimizedImage.attributes.height}
          alt={alt}
          {...rest}
        />
        {caption && (
          <figcaption>
            <slot>{alt || caption}</slot>
          </figcaption>
        )}
      </Anchor>
    ) : (
      <>
        <img
          src={optimizedImage.src}
          width={optimizedImage.attributes.width}
          height={optimizedImage.attributes.height}
          alt={alt}
          {...rest}
        />
        {caption && (
          <figcaption>
            <slot>{alt || caption}</slot>
          </figcaption>
        )}
      </>
    )
  }
</figure>

<Fragment slot="head">
  <link rel="preload" as="image" href={optimizedImage.src} />
</Fragment>

<style>
  figure {
    margin: 0;

    img {
      height: auto;
    }

    a {
      --link-color: var(--text-950);
      --visited-color: var(--text-950);
    }
  }
</style>
