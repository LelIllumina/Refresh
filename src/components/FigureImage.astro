---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import type { HTMLAttributes } from "astro/types";

import { Vibrant } from "node-vibrant/node";
import fs from "node:fs/promises";
import path from "node:path";
import { fileURLToPath } from "node:url";

type AstroImageProps = {
  src: string | URL;
  alt: string;
  width?: number;
  height?: number;
  format?: "avif" | "jpeg" | "png" | "webp";
  quality?: number;
  fit?: "contain" | "cover" | "fill" | "inside" | "outside";
  position?: string;
  background?: string;
  loading?: "lazy" | "eager";
  decoding?: "async" | "sync" | "auto";
  sizes?: string;
  referrerpolicy?: HTMLImageElement["referrerPolicy"];
  style?: string;
  class?: string;
} & HTMLAttributes<"img">;

type Props = AstroImageProps & {
  href?: string;
  caption?: string | boolean;
  noglow?: boolean;
};

const { href, src, alt, caption, noglow = false, ...rest } = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/images/**/*.{jpeg,jpg,png,gif,svg,avif,webp}"
);

const isPublic = typeof src === "string" && !(src in images);
const imageSrc = !isPublic && typeof src === "string" ? images[src] : null;

function generateAlt(src: string | undefined) {
  if (!src) return "";
  const filename = src.split("/").pop()?.split(".")[0];
  return filename?.replace(/[-_]/g, " ") ?? "";
}

const resolvedAlt = alt ?? generateAlt(typeof src === "string" ? src : "");

const basePath = fileURLToPath(new URL("../..", import.meta.url));
const imgPath = path.join(basePath, src as string);
const buffer = await fs.readFile(imgPath);
const palette = await Vibrant.from(buffer).getPalette();
const darkglow = palette.DarkMuted?.hex;
const lightglow = palette.LightVibrant?.hex;
---

<figure data-noglow={noglow}>
  {
    href ? (
      <a href={href}>
        {isPublic ? (
          <img src={src as string} alt={resolvedAlt} {...rest} />
        ) : (
          <Image src={imageSrc!()} alt={resolvedAlt} {...rest} />
        )}
      </a>
    ) : isPublic ? (
      <img src={src as string} alt={resolvedAlt} {...rest} />
    ) : (
      <Image src={imageSrc!()} alt={resolvedAlt} {...rest} />
    )
  }

  {
    caption != false && resolvedAlt && (
      <figcaption>{caption || resolvedAlt}</figcaption>
    )
  }
</figure>

<style define:vars={{ darkglow, lightglow }}>
  figure {
    margin: 0;

    &:not([data-noglow]) {
      filter: drop-shadow(0 0 10px black) drop-shadow(0 0 50px var(--glow));
    }

    @media (prefers-color-scheme: light) {
      --glow: var(--lightglow);
    }

    @media (prefers-color-scheme: dark) {
      --glow: var(--darkglow);
    }
  }
</style>
